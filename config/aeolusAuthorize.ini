[main]
#自定义用户名密码认证Realm实现
aeolusUPRealm=com.sozone.aeolus.ext.realm.PMACAuthorizingRealm
#定义加密算法
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
#使用MD5散列
credentialsMatcher.hashAlgorithmName=md5
#散列一次
credentialsMatcher.hashIterations=1
#设置加密算法
aeolusUPRealm.credentialsMatcher=$credentialsMatcher

#Token认证Realm实现
oauth2ClientRealm=com.sozone.aeolus.ext.realm.OAuth2ClientAuthTokenRealm

#手机认证Realm实现
mobileCertRealm=com.sozone.eokb.mobile.authz.realm.MobileCertAuthrizingRealm
mobileRestRealm=com.sozone.eokb.mobile.authz.realm.MobileRestAuthrizingRealm

##配置认证策略
# 1. AtLeastOneSuccessfulStrategy ：如果一个（或更多）Realm 验证成功，则整体的尝试被认
# 为是成功的。如果没有一个验证成功，则整体尝试失败。
# 2. FirstSuccessfulStrategy 只有第一个成功地验证的Realm 返回的信息将被使用。所有进一步
# 的Realm 将被忽略。如果没有一个验证成功，则整体尝试失败
# 3. AllSucessfulStrategy 为了整体的尝试成功，所有配置的Realm 必须验证成功。如果没有一
# 个验证成功，则整体尝试失败。
# ModularRealmAuthenticator 默认的是AtLeastOneSuccessfulStrategy
#配置自定义验证器,这个验证器不管成功与否都只调用第一个支持AuthenticationToken的Realm
authenticator=com.sozone.aeolus.authorize.pam.FirstSupportsModularRealmAuthenticator
#配置策略
# AllSuccessfulStrategy 表示 MyRealm1和MyRealm2 认证都通过才算通过
authcStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
#将验证器和策略关联起来
authenticator.authenticationStrategy=$authcStrategy
#配置验证器所使用的Realm
authenticator.realms=$aeolusUPRealm,$oauth2ClientRealm,$mobileCertRealm,$mobileRestRealm

#把Authenticator设置给securityManager
securityManager.authenticator = $authenticator
